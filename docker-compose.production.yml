# Docker-compose configuration for production

version: '2'

services:
    django:
        build:
            context: .
            dockerfile: Dockerfile-django.production
        container_name: toddl_django
        restart: unless-stopped
        volumes:
            - "./toddl/app/build:/app/app/build"
            - "./toddl/app/webpack-stats.json:/app/app/webpack-stats.json"
            - "/var/lib/docker-nginx/files/toddl/media:/files/media"
            - "/var/lib/docker-nginx/files/toddl/assets:/files/assets"
            - "/var/log/toddl:/var/log/toddl"
        # For some reason the command also has to be specified here, otherwise the entrypoint+command combination won't
        #  work.
        entrypoint: /usr/bin/wait-for-it.sh postgres:5432 -t 60 --
        command: gunicorn toddl.wsgi:application --workers 2 --bind :80
        networks:
            - default
            - toddl_nginx
            - toddl_postgres
        depends_on:
            - redis
        external_links:
            - postgres-10:postgres

    node:
        build:
            context: .
            dockerfile: Dockerfile-node.production
        # Make this service no-op as we don't actually want it running but do want to use docker-compose file to define
        #  volumes etc.
        restart: "no"
        command: "true"
        volumes:
            - "./toddl/app:/app/app"
            - "./toddl/static:/app/static:ro"
        # Node container won't be part of any networks
        networks: []

    redis:
        image: redis:4.0.9-alpine
        restart: unless-stopped
        volumes:
            - "/var/lib/docker-toddl/redis:/data"
        networks:
            - default

# NB: These networks must be created by fabfile and contain the global nginx/postgres containers.
# Keep it in sync with fabfile!
networks:
    default:
        external:
            name: toddl_default
    toddl_nginx:
        external: true
    toddl_postgres:
        external: true
